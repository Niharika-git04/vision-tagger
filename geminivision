import json
import os
import google.generativeai as genai
from PIL import Image

def generate_tags_with_gemini_vision(image_path, metadata):
    """
    Generates tags using the Gemini Pro Vision API based on the image and metadata.
    """
    GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
    if not GOOGLE_API_KEY:
        raise ValueError("Please set the GOOGLE_API_KEY environment variable.")

    genai.configure(api_key=GOOGLE_API_KEY)
    model = genai.GenerativeModel('gemini-pro-vision')  # Use gemini-pro-vision

    try:
        # Load the image
        img = Image.open(image_path)

        # Prepare the image data for the API
        img_data = genai.Part.from_pil(img)

        prompt = f"""
        I have the following image and its metadata:

        Metadata:
        {json.dumps(metadata, indent=2)}

        Analyze the image and its metadata and generate a list of relevant tags (keywords) that accurately describe the image.
        Consider both what you see in the image and the information provided in the metadata.
        The tags should be concise and descriptive.  Return the tags as a comma separated list.
        For example: sunset, ocean, beach, California
        """

        response = model.generate_content([prompt, img_data])  # Pass image data and prompt
        tag_string = response.text.strip()
        tags = [tag.strip() for tag in tag_string.split(",")]  # Split comma-separated string into list
        return tags

    except FileNotFoundError:
        print(f"Error: Image file not found: {image_path}")
        return []
    except Exception as e:
        print(f"Error generating tags with Gemini Vision: {e}")
        return []


def tag_image_with_gemini_vision(image_path, metadata_path):
    """
    Tags an image using Gemini Pro Vision.
    """
    try:
        with open(metadata_path, 'r') as f:
            metadata = json.load(f)

        tags = generate_tags_with_gemini_vision(image_path, metadata)

        print(f"Image: {image_path}")
        print(f"Tags generated by Gemini Vision: {tags}")


    except FileNotFoundError:
        print(f"Error: Metadata file not found for {image_path}")
    except Exception as e:
        print(f"Error processing {image_path}: {e}")


# Example Usage (with Gemini Vision):
image_file = "image1.jpg"
metadata_file = "image1.json"
tag_image_with_gemini_vision(image_file, metadata_file)
